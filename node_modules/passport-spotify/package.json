{
  "name": "passport-spotify",
  "version": "0.1.0",
  "description": "Spotify authentication strategy for Passport.",
  "author": {
    "name": "José M. Pérez",
    "url": "https://github.com/jmperez/"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/jmperez/passport-spotify.git"
  },
  "keywords": [
    "node",
    "passport",
    "spotify"
  ],
  "bugs": {
    "url": "hhttps://github.com/jmperez/passport-spotify/issues"
  },
  "main": "./lib/passport-spotify",
  "engines": {
    "node": ">= 0.8.0"
  },
  "config": {
    "blanket": {
      "pattern": "//^(?!.*node_modules.*$).*lib//"
    }
  },
  "scripts": {
    "test": "make coveralls"
  },
  "dependencies": {
    "pkginfo": "0.3.x",
    "passport-oauth": "1.0.0",
    "querystring": "~0.2.0",
    "util": "~0.10.3"
  },
  "devDependencies": {
    "mocha": "1.20.1",
    "should": "4.0.4",
    "sinon": "1.10.2",
    "blanket": "~1.1.6",
    "mocha-lcov-reporter": "0.0.1",
    "coveralls": "~2.10.0"
  },
  "readme": "# Passport-Spotify\n\n[Passport](http://passportjs.org/) strategy for authenticating with [Spotify](http://www.spotify.com/)\nusing the OAuth 2.0 API.\n\nThis module lets you authenticate using Spotify in your Node.js applications.\nBy plugging into Passport, Spotify authentication can be easily and\nunobtrusively integrated into any application or framework that supports\n[Connect](http://www.senchalabs.org/connect/)-style middleware, including\n[Express](http://expressjs.com/).\n\nFor more information about Spotify's OAuth 2.0 implementation, check their \n[Web API Authorization Guide](https://developer.spotify.com/web-api/authorization-guide/).\n\n## Installation\n\n    $ npm install passport-spotify\n\n## Usage\n\n### Configure Strategy\n\nThe Spotify authentication strategy authenticates users using a Spotify account\nand OAuth 2.0 tokens.  The strategy requires a `verify` callback, which accepts\nthese credentials and calls `done` providing a user, as well as `options`\nspecifying a client ID, client secret, and callback URL.\n\n```javascript\npassport.use(new SpotifyStrategy({\n    clientID: client_id,\n    clientSecret: client_secret,\n    callbackURL: \"http://localhost:8888/auth/spotify/callback\"\n  },\n  function(accessToken, refreshToken, profile, done) {\n    User.findOrCreate({ spotifyId: profile.id }, function (err, user) {\n      return done(err, user);\n    });\n  }\n));\n```\n\n### Authenticate Requests\n\nUse `passport.authenticate()`, specifying the `'spotify'` strategy, to\nauthenticate requests.\n\nFor example, as route middleware in an [Express](http://expressjs.com/)\napplication:\n\n```javascript\napp.get('/auth/spotify',\n  passport.authenticate('spotify'),\n  function(req, res){\n    // The request will be redirected to spotify for authentication, so this\n    // function will not be called.\n  });\n\napp.get('/auth/spotify/callback',\n  passport.authenticate('spotify', { failureRedirect: '/login' }),\n  function(req, res) {\n    // Successful authentication, redirect home.\n    res.redirect('/');\n  });\n```\n\n### Using scopes\n\nDepending on the data you want to fetch, you may want to specify custom scopes. For more information about scopes in the Spotify Web API check [their developer site](https://developer.spotify.com/web-api/using-scopes/).\n\nBy default, no scope is passed. That means that you won't fetch information such as display name, picture or email. You can get those by using these scopes:\n\n - `user-read-email`: Returns the email address of the user on Spotify, if it exists.\n - `user-read-private`: Returns private information about the user such as display name and picture, if they are set.\n\nYou can specify the parameters in the `authenticate` call:\n\n```javascript\napp.get('/auth/spotify',\n  passport.authenticate('spotify', {scope: ['user-read-email', 'user-read-private'] }),\n  function(req, res){\n   // The request will be redirected to spotify for authentication, so this\n   // function will not be called.\n});\n```\n\n## Examples\n\nFor a complete, working example, refer to the [login example](https://github.com/jmperez/passport-spotify/tree/master/examples/login).\n\n## Tests\n\n    $ npm install --dev\n    $ make test\n    \n## Build and Coverage Status\n\n[![Build Status](https://travis-ci.org/JMPerez/passport-spotify.svg?branch=master)](https://travis-ci.org/JMPerez/passport-spotify) [![Coverage Status](https://coveralls.io/repos/JMPerez/passport-spotify/badge.png?branch=master)](https://coveralls.io/r/JMPerez/passport-spotify?branch=master)\n\n## License\n\n[The MIT License](http://opensource.org/licenses/MIT)\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/jmperez/passport-spotify",
  "_id": "passport-spotify@0.1.0",
  "dist": {
    "shasum": "bc00672648c50245812bd83e68270aff5b6acaec"
  },
  "_from": "passport-spotify@latest",
  "_resolved": "https://registry.npmjs.org/passport-spotify/-/passport-spotify-0.1.0.tgz"
}
