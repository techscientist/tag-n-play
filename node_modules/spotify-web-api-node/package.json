{
  "name": "spotify-web-api-node",
  "version": "0.0.11",
  "homepage": "https://github.com/thelinmichael/spotify-web-api-node",
  "description": "A Node.js wrapper for Spotify's Web API",
  "main": "src/spotify-web-api.js",
  "author": {
    "name": "Michael Thelin"
  },
  "license": "MIT",
  "dependencies": {
    "restler": "~3.2.0",
    "promise": "~5.0.0"
  },
  "devDependencies": {
    "xunit-file": "0.0.5",
    "grunt-contrib-jshint": "~0.10.0",
    "grunt-contrib-watch": "~0.6",
    "grunt-simple-mocha": "0.4.x",
    "should": "~3.0",
    "mocha": "~1.20.1"
  },
  "readme": "Spotify Web API Node\n==================\n\nThis is a Node.js wrapper/client for the [Spotify Web API](https://developer.spotify.com/web-api/). It includes helper functions to do the following:\n\n- Get albums, artists, tracks, users and playlists\n- Get albums for a specific artist\n- Get an artist's top tracks\n- Get artists similar to a given artist\n- Search albums, artists and tracks\n- Get a user's playlists (currently non-collaborative)\n- Create playlists\n- Add tracks to a playlist\n- Change playlist details\n- Add, remove, and get tracks that are in the signed in user's Your Music library\n- Check if a track is in the signed in user's Your Music library\n\nSome methods require authentication, which can be done using these flows:\n\n- [Client credentials flow](http://tools.ietf.org/html/rfc6749#section-4.4) (Application-only authentication)\n- [Authorization code grant](http://tools.ietf.org/html/rfc6749#section-4.1) (Signed by user)\n\nEven though authentication isn't always necessary, it always gives benefits such as an increased rate limit.\n\n##### Dependencies\n\nThis project depends on [restler](https://github.com/danwrong/restler) to make HTTP requests, and [promise](https://github.com/then/promise) as its [Promises/A+](http://promises-aplus.github.io/promises-spec/) implementation.\n\n## Installation\n\n    $ npm install spotify-web-api-node --save\n\n## Usage\n\nFirst, instantiate the wrapper.\n```javascript\nvar SpotifyWebApi = require('spotify-web-api-node');\n\n// credentials are optional\nvar spotifyApi = new SpotifyWebApi({\n  clientId : 'fcecfc72172e4cd267473117a17cbd4d',\n  clientSecret : 'a6338157c9bb5ac9c71924cb2940e1a7',\n  redirectUri : 'http://www.example.com/callback'\n});\n```\n\nIf you've got an access token and want to use it for all calls, simply use the api object's set method. Handling credentials is described in detail in the Authorization section.\n```javascript\nspotifyApi.setAccessToken('<your_access_token>');\n```\n\nLastly, use the wrapper's helper methods to make the request to Spotify's Web API. The wrapper uses promises, so you need to provide a success callback as well as an error callback.\n```javascript\n// Get Elvis' albums\nspotifyApi.getArtistAlbums('43ZHCT0cAZBISjO8DG9PnE')\n  .then(function(data) {\n    console.log('Artist albums', data);\n  }, function(err) {\n    console.error(err);\n  });\n```\n\nThe functions that fetch data from the API also support an optional JSON object with a set of options. For example, limit and offset can be used in functions that returns paginated results, such as search and retrieving an artist's albums.\n\n```javascript\n// Passing a callback - get Elvis' albums in range [20...29]\nspotifyApi.getArtistAlbums('43ZHCT0cAZBISjO8DG9PnE', {limit: 10, offset: 20})\n  .then(function(data) {\n    console.log('Album information', data);\n  }, function(err) {\n    console.error(err);\n  });\n```\n\n### More examples\n\nBelow are examples for all helper functions. Longer examples can be found in the [examples folder](examples/).\n\n```javascript\nvar SpotifyWebApi = require('spotify-web-api-node');\n\nvar spotifyApi = new SpotifyWebApi();\n\n// Get multiple albums\nspotifyApi.getAlbums(['5U4W9E5WsYb2jUQWePT8Xm', '3KyVcddATClQKIdtaap4bV'])\n  .then(function(data) {\n    console.log('Albums information', data);\n  }, function(err) {\n    console.error(err);\n  });\n\n// Get an artist\nspotifyApi.getArtist('2hazSY4Ef3aB9ATXW7F5w3')\n  .then(function(data) {\n    console.log('Artist information', data);\n  }, function(err) {\n    console.error(err);\n  });\n\n// Get multiple artists\nspotifyApi.getArtists(['2hazSY4Ef3aB9ATXW7F5w3', '6J6yx1t3nwIDyPXk5xa7O8'])\n  .then(function(data) {\n    console.log('Artists information', data);\n  }, function(err) {\n    console.error(err);\n  });\n\n// Get albums by a certain artist\nspotifyApi.getArtistAlbums('43ZHCT0cAZBISjO8DG9PnE')\n  .then(function(data) {\n    console.log('Artist albums', data);\n  }, function(err) {\n    console.error(err);\n  });\n\n// Search tracks whose name, album or artist contains 'Love'\nspotifyApi.searchTracks('Love')\n  .then(function(data) {\n    console.log('Search by \"Love\"', data);\n  }, function(err) {\n    console.error(err);\n  });\n\n// Search artists whose name contains 'Love'\nspotifyApi.searchArtists('Love')\n  .then(function(data) {\n    console.log('Search artists by \"Love\"', data);\n  }, function(err) {\n    console.error(err);\n  });\n\n// Search tracks whose artist's name contains 'Love'\nspotifyApi.searchTracks('artist:Love')\n  .then(function(data) {\n    console.log('Search tracks by \"Love\" in the artist name', data);\n  }, function(err) {\n    console.log('Something went wrong!', err);\n  });\n\n// Get tracks in an album\nspotifyApi.getAlbumTracks('41MnTivkwTO3UUJ8DrqEJJ', { limit : 5, offset : 1 })\n  .then(function(data) {\n    console.log(data);\n  }, function(err) {\n    console.log('Something went wrong!', err);\n  });\n\n// Get an artist's top tracks\nspotifyApi.getArtistTopTracks('0oSGxfWSnnOXhD2fKuz2Gy', 'GB')\n  .then(function(data) {\n    console.log(data);\n    }, function(err) {\n    console.log('Something went wrong!', err);\n  });\n\n// Get artists related to an artist\nspotifyApi.getArtistRelatedArtists('0qeei9KQnptjwb8MgkqEoy')\n  .then(function(data) {\n    console.log(data);\n  }, function(err) {\n    done(err);\n  });\n\n/*\n * User methods\n */\n\n// Get a user\nspotifyApi.getUser('petteralexis')\n  .then(function(data) {\n    console.log('Some information about this user', data);\n  }, function(err) {\n    console.log('Something went wrong!', err);\n  });\n\n// Get the authenticated user\nspotifyApi.getMe()\n  .then(function(data) {\n    console.log('Some information about the authenticated user', data);\n  }, function(err) {\n    console.log('Something went wrong!', err);\n  });\n\n/*\n * Playlist methods\n */\n\n// Get a playlist\nspotifyApi.getPlaylist('thelinmichael', '5ieJqeLJjjI8iJWaxeBLuK')\n  .then(function(data) {\n    console.log('Some information about this playlist', data);\n  }, function(err) {\n    console.log('Something went wrong!', err);\n  });\n\n// Get a user's playlists\nspotifyApi.getUserPlaylists('thelinmichael')\n  .then(function(data) {\n    console.log('Retrieved playlists', data);\n  },function(err) {\n    console.log('Something went wrong!', err);\n  });\n\n// Create a playlist\nspotifyApi.createPlaylist('thelinmichael', 'My Cool Playlist', { 'public' : true })\n  .then(function(data) {\n    console.log('Created playlist!');\n  }, function(err) {\n    console.log('Something went wrong!', err);\n  });\n\n// Add tracks to a playlist\nspotifyApi.addTracksToPlaylist('thelinmichael', '5ieJqeLJjjI8iJWaxeBLuK', [\"spotify:track:4iV5W9uYEdYUVa79Axb7Rh\", \"spotify:track:1301WleyT98MSxVHPZCA6M\"])\n  .then(function(data) {\n    console.log('Added tracks to playlist!');\n  }, function(err) {\n    console.log('Something went wrong!', err);\n  });\n\n// Add tracks to a specific position in a playlist\nspotifyApi.addTracksToPlaylist('thelinmichael', '5ieJqeLJjjI8iJWaxeBLuK', [\"spotify:track:4iV5W9uYEdYUVa79Axb7Rh\", \"spotify:track:1301WleyT98MSxVHPZCA6M\"],\n  {\n    position : 5\n  })\n  .then(function(data) {\n    console.log('Added tracks to playlist!');\n  }, function(err) {\n    console.log('Something went wrong!', err);\n  });\n\n// Change playlist details\nspotifyApi.changePlaylistDetails('thelinmichael', '5ieJqeLJjjI8iJWaxeBLuK', \n  {\n    name: 'This is a new name for my Cool Playlist, and will become private',\n    'public' : false\n  }).then(function(data) {\n     console.log('Playlist is now private!');\n  }, function(err) {\n    console.log('Something went wrong!', err);\n  });\n\n/*\n * Your Music library methods\n */\n\n// Get tracks in the signed in user's Your Music library\nspotifyApi.getMySavedTracks({\n    limit : 2,\n    offset: 1 \n  })\n  .then(function(data) {\n    console.log('Done!');\n  }, function(err) {\n    console.log('Something went wrong!', err);\n  });\n\n\n// Check if tracks are in the signed in user's Your Music library\nspotifyApi.containsMySavedTracks([\"5ybJm6GczjQOgTqmJ0BomP\"])\n  .then(function(data) {\n\n    // An array is returned, where the first element corresponds to the first track ID in the query\n    var trackIsInYourMusic = data[0];\n\n    if (trackIsInYourMusic) {\n      console.log('Track was found in the user\\'s Your Music library');\n    } else {\n      console.log('Track was not found.');\n    }\n  }, function(err) {\n    console.log('Something went wrong!', err);\n  });\n\n// Remove tracks from the signed in user's Your Music library\nspotifyApi.removeFromMySavedTracks([\"3VNWq8rTnQG6fM1eldSpZ0\"])\n  .then(function(data) {\n    console.log('Removed!');\n  }, function(err) {\n    console.log('Something went wrong!', err);\n  });\n});\n\n// Add tracks to the signed in user's Your Music library\napi.addToMySavedTracks([\"3VNWq8rTnQG6fM1eldSpZ0\"])\n  .then(function(data) {\n    console.log('Added track!');\n  }, function(err) {\n    console.log('Something went wrong!', err);\n  });\n});\n\n```\n\n### Nesting calls\n```javascript\n// track detail information for album tracks\nspotifyApi.getAlbum('5U4W9E5WsYb2jUQWePT8Xm')\n  .then(function(data) {\n    return data.tracks.map(function(t) { return t.id; });\n  })\n  .then(function(trackIds) {\n    return spotifyApi.getTracks(trackIds);\n  })\n  .then(function(tracksInfo) {\n    console.log(tracksInfo);\n  })\n  .catch(function(error) {\n    console.error(error);\n  });\n\n  // album detail for the first 10 Elvis' albums\nspotifyApi.getArtistAlbums('43ZHCT0cAZBISjO8DG9PnE', {limit: 10})\n  .then(function(data) {\n    return data.albums.map(function(a) { return a.id; });\n  })\n  .then(function(albums) {\n    return spotifyApi.getAlbums(albums);\n  }).then(function(data) {\n    console.log(data);\n  });\n```\n\n### Authorization\n\nSupplying an access token in a request is not always required by the API (see the [Endpoint reference](https://developer.spotify.com/spotify-web-api/endpoint-reference/) for details), but it will give your application benefits such as a higher rate limit. This wrapper supports two authorization flows; The Authorization Code flow (signed by a user), and the Client Credentials flow (application authentication - the user isn't involved). See Spotify's [Authorization guide](https://developer.spotify.com/spotify-web-api/authorization-guide/) for detailed information on these flows.\n\nThe first thing you need to do is to [create an application](https://developer.spotify.com/my-applications/). A step-by-step tutorial is offered by Spotify in this [tutorial](https://developer.spotify.com/spotify-web-api/tutorial/).\n\n#### Authorization code flow\n\nWith the application created and its redirect URI set, the only thing necessary for the application to retrieve an **authorization code** is the user's permission. Which permissions you're able to ask for is documented in Spotify's [Using Scopes section](https://developer.spotify.com/spotify-web-api/using-scopes/).\n\nIn order to get permissions, you need to direct the user to our Accounts service. Generate the URL by using the wrapper's authorization URL method.\n\n```javascript\nvar scopes = ['user-read-private', 'user-read-email'],\n    redirectUri = 'https://example.com/callback',\n    clientId = '5fe01282e44241328a84e7c5cc169165',\n    state = 'some-state-of-my-choice';\n\n// Setting credentials can be done in the wrapper's constructor, or using the API object's setters.\nvar spotifyApi = new SpotifyWebApi({\n  redirectUri : redirectUri,\n  clientId : clientId\n});\n\n// Create the authorization URL\nvar authorizeURL = spotifyApi.createAuthorizeURL(scopes, state);\n\n// https://accounts.spotify.com:443/authorize?client_id=5fe01282e44241328a84e7c5cc169165&response_type=code&redirect_uri=https://example.com/callback&scope=user-read-private%20user-read-email&state=some-state-of-my-choice\nconsole.log(authorizeURL);\n```\n\nThe example below uses a hardcoded authorization code, retrieved from the Accounts service as described above.\n\n```javascript\nvar credentials = {\n  clientId : 'someClientId',\n  clientSecret : 'someClientSecret',\n  redirectUri : 'http://www.michaelthelin.se/test-callback'\n};\n\nvar spotifyApi = new SpotifyWebApi(credentials);\n\n// The code that's returned as a query parameter to the redirect URI\nvar code = 'MQCbtKe23z7YzzS44KzZzZgjQa621hgSzHN';\n\n// Retrieve an access token and a refresh token\nspotifyApi.authorizationCodeGrant(code)\n  .then(function(data) {\n    console.log('The token expires in ' + data['expires_in']);\n    console.log('The access token is ' + data['access_token']);\n    console.log('The refresh token is ' + data['refresh_token']);\n\n    // Set the access token on the API object to use it in later calls\n    spotifyApi.setAccessToken(data['access_token']);\n    spotifyApi.setRefreshToken(data['refresh_token']);\n  }, function(err) {\n    console.log('Something went wrong!', err);\n  });\n```\n\nSince the access token was set on the api object in the previous success callback, **it's going to be used in future calls**. As it was retrieved using the Authorization Code flow, it can also be refreshed unless it has expired.\n\n```javascript\n// clientId, clientSecret and refreshToken has been set on the api object previous to this call.\nspotifyApi.refreshAccessToken()\n  .then(function(data) {\n    console.log('The access token has been refreshed!');\n  }, function(err) {\n    console.log('Could not refresh access token', err);\n  });\n```\n\n#### Client Credential flow\n\nThe Client Credential flow doesn't require the user to give permissions, so it's suitable for requests where the application just needs to authenticate itself. This is the case with for example retrieving a playlist. However, note that the access token cannot be refreshed, and that it isn't connected to a specific user.\n\n```javascript\nvar clientId = 'someClientId',\n    clientSecret = 'someClientSecret';\n\n// Create the api object with the credentials\nvar spotifyApi = new SpotifyWebApi({\n  clientId : clientId,\n  clientSecret : clientSecret\n});\n\n// Retrieve an access token.\nspotifyApi.clientCredentialsGrant()\n  .then(function(data) {\n    console.log('The access token expires in ' + data['expires_in']);\n    console.log('The access token is ' + data['access_token']);\n\n    // Save the access token so that it's used in future calls\n    spotifyApi.setAccessToken(data['access_token']);\n  }, function(err) {\n        console.log('Something went wrong when retrieving an access token', err);\n  });\n```\n\n#### Setting credentials\n\nCredentials are either set when constructing the API object or set after the object has been created using setters. They can be set all at once or one at a time.\n\nUsing setters, getters and resetters.\n```javascript\n// Use setters to set all credentials one by one\nvar spotifyApi = new SpotifyWebApi();\nspotifyApi.setAccessToken('myAccessToken');\nspotifyApi.setRefreshToken('myRefreshToken');\nspotifyApi.setRedirectURI('http://www.example.com/test-callback');\nspotifyApi.setClientId('myOwnClientId');\nspotifyApi.setClientSecret('someSuperSecretString');\n\n// Set all credentials at the same time\nspotifyApi.setCredentials({\n  'accessToken' : 'myAccessToken',\n  'refreshToken' : 'myRefreshToken',\n  'redirectUri' : 'http://www.example.com/test-callback',\n  'clientId ' : 'myClientId',\n  'clientSecret' : 'myClientSecret'\n});\n\n// Get the credentials one by one\nconsole.log('The access token is ' + spotifyApi.getAccessToken());\nconsole.log('The refresh token is ' + spotifyApi.getRefreshToken());\nconsole.log('The redirectURI is ' + spotifyApi.getRedirectURI());\nconsole.log('The client ID is ' + spotifyApi.getClientId());\nconsole.log('The client secret is ' + spotifyApi.getClientSecret());\n\n// Get all credentials\nconsole.log('The credentials are ' + spotifyApi.getCredentials());\n\n// Reset the credentials\nspotifyApi.resetAccessToken();\nspotifyApi.resetRefreshToken();\nspotifyApi.resetRedirectURI();\nspotifyApi.resetClientId();\nspotifyApi.resetClientSecret();\nspotifyApi.resetCode();\n\n// Reset all credentials at the same time\nspotifyApi.resetCredentials();\n```\n\nUsing the constructor.\n```javascript\n// Set necessary parts of the credentials on the constructor\nvar spotifyApi = new SpotifyWebApi({\n  clientId : 'myClientId',\n  clientSecret : 'myClientSecret'\n});\n\n// Get an access token and 'save' it using a setter\nspotifyApi.clientCredentialsGrant()\n  .then(function(data) {\n    console.log('The access token is ' + data['access_token']);\n    spotifyApi.setAccessToken(data['access_token']);\n  }, function(err) {\n    console.log('Something went wrong!', err);\n  });\n```\n\n```javascript\n// Set the credentials when making the request\nvar spotifyApi = new SpotifyWebApi({\n  accessToken : 'njd9wng4d0ycwnn3g4d1jm30yig4d27iom5lg4d3'\n});\n\n// Do search using the access token\nspotifyApi.searchTracks('artist:Love')\n  .then(function(data) {\n    console.log(data);\n  }, function(err) {\n    console.log('Something went wrong!', err);\n  });\n```\n\n```javascript\n// Set the credentials when making the request\nvar spotifyApi = new SpotifyWebApi({\n  accessToken : 'njd9wng4d0ycwnn3g4d1jm30yig4d27iom5lg4d3'\n});\n\n// Get tracks in a playlist\napi.getPlaylistTracks('thelinmichael', '3ktAYNcRHpazJ9qecm3ptn', { 'fields' : 'items' })\n  .then(function(data) {\n    console.log('The playlist contains these tracks', data);\n  }, function(err) {\n    console.log('Something went wrong!', err);\n  });\n```\n\n## Change log\n\n#### 0.0.11\n\n- Add Change Playlist details endpoint (change published status and name). Gracias [JMPerez](https://github.com/JMPerez).\n\n#### 0.0.10\n\n- Add Your Music Endpoints (add tracks, remove tracks, contains tracks, get tracks).\n- Documentation updates (change scope name of playlist-modify to playlist-modify-public, and a fix to a parameter type). Thanks [JMPerez](https://github.com/JMPerez) and [matiassingers](https://github.com/matiassingers).\n\n#### 0.0.9\n\n- Add [Related artists](https://developer.spotify.com/web-api/get-related-artists/) endpoint\n\n\n## Future development\n\n- Optional caching\n- Increased test coverage\n",
  "readmeFilename": "README.md",
  "_id": "spotify-web-api-node@0.0.11",
  "dist": {
    "shasum": "29d775c52b674f5e4aa216326a87d020cc686677"
  },
  "_from": "spotify-web-api-node@latest",
  "_resolved": "https://registry.npmjs.org/spotify-web-api-node/-/spotify-web-api-node-0.0.11.tgz"
}
